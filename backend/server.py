import sys
import logging
import cv2
import tempfile
import json
import torch
from fastapi import FastAPI, UploadFile, File
from fastapi.responses import FileResponse
from fastapi.middleware.cors import CORSMiddleware
from ultralytics import YOLO

# üîπ –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    level=logging.INFO,  # –†—ñ–≤–µ–Ω—å –ª–æ–≥—É–≤–∞–Ω–Ω—è
    format="%(asctime)s - %(levelname)s - %(message)s",
    handlers=[
        logging.StreamHandler(sys.stdout),  # –í–∏–≤—ñ–¥ —É —Ç–µ—Ä–º—ñ–Ω–∞–ª
        logging.FileHandler("logs.log", mode="a")  # –ó–∞–ø–∏—Å —É —Ñ–∞–π–ª
    ]
)

# üîπ –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è FastAPI
app = FastAPI()

# üîπ –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"], 
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# üîπ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ GPU
USE_GPU = torch.cuda.is_available()
DEVICE = "cuda" if USE_GPU else "cpu"

logging.info(f"üöÄ –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è GPU: {USE_GPU}")
logging.info(f"üñ•Ô∏è –ü—Ä–∏—Å—Ç—Ä—ñ–π –¥–ª—è –æ–±—á–∏—Å–ª–µ–Ω—å: {DEVICE}")

# üîπ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –º–æ–¥–µ–ª—ñ YOLO
MODEL_PATH = "best.pt"
MIN_CONFIDENCE = 0.5
model = YOLO(MODEL_PATH).to(DEVICE)

@app.post("/upload-video/")
async def upload_video(file: UploadFile = File(...)):
    """
    –û–±—Ä–æ–±–∫–∞ –≤—ñ–¥–µ–æ —Ç–∞ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è JSON —Ñ–∞–π–ª—É –∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –¥–µ—Ç–µ–∫—Ü—ñ—ó.
    """
    try:
        logging.info(f"üîÑ –û—Ç—Ä–∏–º–∞–Ω–æ –≤—ñ–¥–µ–æ: {file.filename}")

        # –¢–∏–º—á–∞—Å–æ–≤–µ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤—ñ–¥–µ–æ
        with tempfile.NamedTemporaryFile(delete=False, suffix=".mp4") as temp_video:
            temp_video.write(await file.read())
            temp_video_path = temp_video.name

        # üìπ –í—ñ–¥–∫—Ä–∏–≤–∞—î–º–æ –≤—ñ–¥–µ–æ
        video = cv2.VideoCapture(temp_video_path)
        fps = video.get(cv2.CAP_PROP_FPS)
        frame_count = int(video.get(cv2.CAP_PROP_FRAME_COUNT))
        duration = frame_count / fps if fps > 0 else 0

        logging.info(f"üé¨ FPS: {fps:.2f}, üìä –ö–∞–¥—Ä—ñ–≤: {frame_count}, ‚è±Ô∏è –¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å: {duration:.2f} —Å–µ–∫.")

        sys.stdout.flush()

        # üîπ –ê–Ω–∞–ª—ñ–∑ –∫–æ–∂–Ω–æ–≥–æ 10-–≥–æ –∫–∞–¥—Ä—É, –ª–æ–≥ –∫–æ–∂–Ω–æ–≥–æ 50-–≥–æ –∫–∞–¥—Ä—É
        frame_interval = max(1, int(fps / 10))  
        frame_counter = 0
        results = []

        while video.isOpened():
            ret, frame = video.read()
            if not ret:
                break

            if frame_counter % frame_interval == 0:
                timestamp = round(frame_counter / fps, 4)
                detections = model(frame, verbose=False)

                frame_data = {"time": timestamp, "objects": []}

                for result in detections[0].boxes:
                    confidence = float(result.conf[0])

                    if confidence >= MIN_CONFIDENCE:
                        x1, y1, x2, y2 = [float(coord) for coord in result.xyxy[0]]
                        label = model.names[int(result.cls[0])]

                        frame_data["objects"].append(
                            {
                                "object-class": label,
                                "frame_coordinates": [
                                    round(x1 / frame.shape[1], 4),
                                    round(y1 / frame.shape[0], 4),
                                    round(x2 / frame.shape[1], 4),
                                    round(y2 / frame.shape[0], 4)
                                ]
                            }
                        )

                results.append(frame_data)

            # üîπ –õ–æ–≥ –∫–æ–∂–Ω–æ–≥–æ 50-–≥–æ –∫–∞–¥—Ä—É (–≥–ª–æ–±–∞–ª—å–Ω–∏–π —Å—Ç–∞—Ç—É—Å)
            if frame_counter % 50 == 0 and frame_counter > 0:
                logging.info(f"üõ†Ô∏è –ö–∞–¥—Ä {frame_counter}: –æ–±—Ä–æ–±–∫–∞ —Ç—Ä–∏–≤–∞—î...")

            sys.stdout.flush()
            frame_counter += 1

        video.release()

        # ‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è –æ–±—Ä–æ–±–∫–∏
        logging.info(f"‚úÖ –û–±—Ä–æ–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –í—Å—å–æ–≥–æ –∫–∞–¥—Ä—ñ–≤: {len(results)}")

        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∏–º—á–∞—Å–æ–≤–æ–≥–æ JSON —Ñ–∞–π–ª—É
        with tempfile.NamedTemporaryFile(delete=False, suffix=".json", mode="w", encoding="utf-8") as temp_json:
            json.dump({"video_analysis": results}, temp_json, indent=4)
            temp_json_path = temp_json.name

        return FileResponse(temp_json_path, media_type="application/json", filename="video_analysis.json")

    except Exception as e:
        logging.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –≤—ñ–¥–µ–æ: {str(e)}")
        return {"error": str(e)}


if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8000)
